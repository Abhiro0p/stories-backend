version: '3.8'

networks:
  stories-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres-prod-data:
    driver: local
  redis-prod-data:
    driver: local
  minio-prod-data:
    driver: local
  prometheus-prod-data:
    driver: local
  grafana-prod-data:
    driver: local

services:
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: stories-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - stories-api-1
      - stories-api-2
    networks:
      - stories-prod
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stories-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: stories_db
      POSTGRES_USER: stories_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres-prod-data:/var/lib/postgresql/data
      - ./postgres.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - stories-prod
    ports:
      - "5432:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stories_user -d stories_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stories-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-prod-data:/data
    networks:
      - stories-prod
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: stories-minio-prod
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_SERVER_URL: https://minio.yourdomain.com
      MINIO_BROWSER_REDIRECT_URL: https://minio-console.yourdomain.com
    volumes:
      - minio-prod-data:/data
    networks:
      - stories-prod
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Stories API - Instance 1
  stories-api-1:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.api
    container_name: stories-api-1
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      PORT: 8080
      GIN_MODE: release
      API_PREFIX: /api/v1
      DATABASE_URL: postgresql://stories_user:${POSTGRES_PASSWORD}@postgres:5432/stories_db?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET: stories-media
      MINIO_USE_SSL: false
      LOG_LEVEL: info
      LOG_FORMAT: json
      PROMETHEUS_ENABLED: true
      CORS_ALLOWED_ORIGINS: https://yourdomain.com,https://www.yourdomain.com
      RATE_LIMIT_REQUESTS_PER_MINUTE: 120
    networks:
      - stories-prod
    healthcheck:
      test: ["CMD", "/stories-api", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Stories API - Instance 2
  stories-api-2:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.api
    container_name: stories-api-2
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      PORT: 8080
      GIN_MODE: release
      API_PREFIX: /api/v1
      DATABASE_URL: postgresql://stories_user:${POSTGRES_PASSWORD}@postgres:5432/stories_db?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET: stories-media
      MINIO_USE_SSL: false
      LOG_LEVEL: info
      LOG_FORMAT: json
      PROMETHEUS_ENABLED: true
      CORS_ALLOWED_ORIGINS: https://yourdomain.com,https://www.yourdomain.com
      RATE_LIMIT_REQUESTS_PER_MINUTE: 120
    networks:
      - stories-prod
    healthcheck:
      test: ["CMD", "/stories-api", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Stories Background Worker
  stories-worker:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.worker
    container_name: stories-worker
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://stories_user:${POSTGRES_PASSWORD}@postgres:5432/stories_db?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      WORKER_POLL_INTERVAL: 30s
      WORKER_BATCH_SIZE: 200
      LOG_LEVEL: info
      LOG_FORMAT: json
    networks:
      - stories-prod

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: stories-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-prod-data:/prometheus
    networks:
      - stories-prod
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: stories-grafana-prod
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: https://grafana.yourdomain.com
      GF_SECURITY_COOKIE_SECURE: true
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: true
    volumes:
      - grafana-prod-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - stories-prod
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
