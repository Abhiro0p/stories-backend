name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: 1.21
  DOCKER_REGISTRY: ghcr.io
  DOCKER_NAMESPACE: ${{ github.repository_owner }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: stories_user
          POSTGRES_PASSWORD: stories_pass
          POSTGRES_DB: stories_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-


    - name: Debug - List files
      run: |
        echo "=== Project structure ==="
        find . -type f -name "*.go" | sort
        echo "=== Internal directory ==="
        ls -la internal/ 2>/dev/null || echo "internal/ directory not found"
        echo "=== Storage package ==="
        ls -la internal/storage/ 2>/dev/null || echo "internal/storage/ not found" 
        echo "=== Media package ==="
        ls -la internal/media/ 2>/dev/null || echo "internal/media/ not found"
        echo "=== Go module status ==="
        go list ./... || echo "Failed to list packages"

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      env:
        DATABASE_URL: postgresql://stories_user:stories_pass@localhost:5432/stories_test_db?sslmode=disable
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-refresh-secret
      run: |
        go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    # Replace the problematic make build with direct go build
    - name: Build binaries
      run: |
        # Try different build strategies based on project structure
        if [ -f "cmd/server/main.go" ]; then
          echo "Building from cmd/server/"
          go build -v -o bin/stories-backend ./cmd/server
        elif [ -f "cmd/main.go" ]; then
          echo "Building from cmd/"
          go build -v -o bin/stories-backend ./cmd
        elif [ -f "main.go" ]; then
          echo "Building from root main.go"
          go build -v -o bin/stories-backend .
        else
          echo "No main.go found, building all packages"
          go build -v ./...
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/stories-backend-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    # Only build Docker if Dockerfile exists
    - name: Check for Dockerfile
      id: dockerfile-check
      run: |
        if [ -f "./deployments/docker/Dockerfile.api" ]; then
          echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
        else
          echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          echo "Warning: ./deployments/docker/Dockerfile.api not found, skipping Docker build"
        fi

    - name: Build and push API image
      if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployments/docker/Dockerfile.api
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for worker
      id: meta-worker
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/stories-backend-worker
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Check for Worker Dockerfile
      id: worker-dockerfile-check
      run: |
        if [ -f "./deployments/docker/Dockerfile.worker" ]; then
          echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
        else
          echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          echo "Warning: ./deployments/docker/Dockerfile.worker not found, skipping worker Docker build"
        fi

    - name: Build and push worker image
      if: steps.worker-dockerfile-check.outputs.dockerfile_exists == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployments/docker/Dockerfile.worker
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-worker.outputs.tags }}
        labels: ${{ steps.meta-worker.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
